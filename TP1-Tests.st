TestCase subclass: #Tp1Test	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'TP1-Tests'!!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test06UsuarioRecibeMensaje	"El usuario recibe un mensaje y despues lo devuelve al pedirselo con getNotificacionesDeUsuario"		| algoChat mensaje|	mensaje := 'Hola Juan'.	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat enviarMensaje: 'hola juan' aUsuario: 'juan'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola juan'.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 15:31'!test11EResumirMensajesCanal	|algoChat |	algoChat := AlgoChat new.		algoChat agregarCanalConNombre: 'canalNuevito'.		algoChat publicarMensaje: 'holaaaaa' enCanal: 'canalNuevito'.	algoChat publicarMensaje: 'todooooooo' enCanal: 'canalNuevito'.	algoChat publicarMensaje: 'biennnnnnnn' enCanal: 'canalNuevito'.		self assert: (algoChat mensajesDelCanal: 'canalNuevito' resumidosALongitud: 4) equals: 'hola... | todo... | bien...'.	self assert: (algoChat mensajesDelCanal: 'canalNuevito' resumidosALongitud: 2) equals: 'ho... | to... | bi...'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test00AlgoChatNuevoNoTieneUsuarios	"Nos fijamos que en un AlgoChat recien creado la cantidad de usuarios sea 0"		| algoChat |	algoChat := AlgoChat new.		self assert: algoChat getCantidadUsuarios equals: 0.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 18:59'!test18UsuarioEsArrobadoEnCanalYRecibeElMensaje	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat publicarMensaje: 'por favor @maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: 'hoy no hace falta que venga @pedro a clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer la libreta' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'por favor @maria y @juan venir a clase hoy | @juan traer la libreta'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test02SeAgregaUsuario	"Agregamos usuario y se modifica el tamanio del diccionario"		| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'Juan'.		self assert: algoChat getCantidadUsuarios equals: 1.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/16/2019 17:20'!test09EnviarMensajeACanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat publicarMensaje: 'tp0 publicado' enCanal: 'anuncios'.		self assert: (algoChat mensajesDelCanal: 'anuncios') equals: 'tp0 publicado'.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 15:41'!test12AgregoUnUsuarioAlCanalYSiNoLoMensionoNoRecibeNotificacion	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'canalNuevo'.		algoChat agregarUsuario: 'juan' alCanal: 'canalNuevo'.	algoChat publicarMensaje: 'No me llega el mensaje' enCanal: 'canalNuevo'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: ''.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 19:16'!test19MandoUnMensajeConUnaPalabraClaveYLeLlegaAlUsuario	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'parcial' alUsuario: 'juan'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro aprobo el parcial' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro traer libreta' enCanal: 'anuncios'.	self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @pedro aprobo el parcial'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 16:23'!test13AgregoConversacionYSeCreaExitosamente	|algoChat |		algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'micky'.	algoChat agregarUsuarioConNombre: 'carlos'.		algoChat crearConversacionConUsuarios: 'juan,micky,carlos'.		self assert: (algoChat cantidadConversaciones ) equals: 1.		! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/16/2019 17:21'!test09UsuarioNuevoRecibeMensajesComoNotificacionesYLasDevuelveResumidas	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.		algoChat enviarMensaje: 'hola juan' aUsuario: 'juan'.	algoChat enviarMensaje: 'como va' aUsuario: 'juan'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan' resumidasALongitud: 4) equals: 'hola... | como...'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:39'!test08ElUsuarioRecibeYDevuelveMuchosMensajes	" Se le envian muchos mensajes al usuario y espera que los devuelva con el formato 'MENSAJE1 | MENSAJE2 | ...."	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.		algoChat enviarMensaje: 'hola juan' aUsuario: 'juan'.	algoChat enviarMensaje: 'como va' aUsuario: 'juan'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola juan | como va'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/16/2019 19:13'!test14SeCreaUnaConversacionYEsLaUnica	|algoChat |		algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'micky'.	algoChat crearConversacionConUsuarios: 'juan,micky'.		self assert: (algoChat obtenerConversaciones) equals: #('juan,micky').! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 20:12'!test21SeReanudaLaPalabraClave	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat reanudarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.	algoChat publicarMensaje: 'libreta olvidada en la clase' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | libreta olvidada en la clase'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 15:20'!test10EnviarMuchosMensajesACanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat publicarMensaje: 'tp0 publicado' enCanal: 'anuncios'.	algoChat publicarMensaje: 'fecha limite 30/8' enCanal: 'anuncios'.	algoChat publicarMensaje: 'se entrega por campus' enCanal: 'anuncios'.		self assert: (algoChat mensajesDelCanal: 'anuncios') equals: 'tp0 publicado | fecha limite 30/8 | se entrega por campus'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test03SeEliminaUsuarioYQuedaVacia	"Agrega un usuario y lo elimina para comprobar que elimina correctamente"		| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'Juan'.	algoChat  borrarUsuario: 'Juan'.		self assert: algoChat getCantidadUsuarios equals: 0.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 17:13'!test15SeLeEnviaUnMensajeALaConversacionYloRecibenLosMiembros	|algoChat |		algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat crearConversacionConUsuarios: 'juan,maria,jose'.		algoChat publicarMensaje: 'hola' enConversacion: 'juan,maria,jose'.	algoChat publicarMensaje: 'como va' enConversacion: 'juan,maria,jose'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: 'hola | como va'.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test05SeEliminaCanalYQuedaVacia	"Agrega un usuario y lo elimina para comprobar que elimina correctamente"		| algoChat |	algoChat := AlgoChat new.		algoChat agregarCanalConNombre:'Juan'.	algoChat  borrarCanal: 'Juan'.		self assert: algoChat getCantidadUsuarios equals: 0.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:53'!test07SeLePidenNotificacionesAlUsuarioPeroNoTieneNinguna	"Se pide al usuario que devuelva un mensaje, pero este devuelve '', ya que no tiene ninguno todavia"		| algoChat |	algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: ''.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test01AlgoChatNuevoNoTieneCanales	"Nos fijamos que en un AlgoChat recien creado la cantidad de canales sea 0"		| algoChat |	algoChat := AlgoChat new.		self assert: algoChat getCantidadCanales  equals: 0.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 17:15'!test16SeEnviaMensajeALaConverYLoRecibe	| algoChat |		algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.		algoChat crearConversacionConUsuarios: 'juan,maria,jose'.		algoChat publicarMensaje: 'hola' enConversacion: 'juan,maria,jose'.	algoChat publicarMensaje: 'como va' enConversacion: 'juan,maria,jose'.		self assert: (algoChat getMensajesDeConversacion: 'juan,maria,jose') equals: 'hola | como va'.	! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/13/2019 19:51'!test20SePausanPalabrasClaves	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'clase' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer libreta' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @juan traer libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | cartuchera olvidada en la clase'.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/12/2019 16:38'!test04AgregarCanal	"Agrega un canal nuevo y se fija que se modifique el tamanio del diccionario"		| algoChat |	algoChat := AlgoChat new.		algoChat agregarCanalConNombre: 'Juan'.	self assert: algoChat getCantidadCanales equals: 1.! !!Tp1Test methodsFor: 'tests' stamp: 'Jcolombo 9/16/2019 18:01'!test15LaConversacionCreadaCuentaConLosUsuariosCorrectos	|algoChat |		algoChat := AlgoChat new.		algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'micky'.	algoChat agregarUsuarioConNombre: 'carlos'.		algoChat crearConversacionConUsuarios: 'juan,micky,carlos'.		self assert: (algoChat obtenerUsuariosConversacion: 'juan,micky,carlos') equals: 'juan,micky,carlos'.! !